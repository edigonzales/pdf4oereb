plugins {
    id 'application'
    id 'maven-publish'
    id 'signing'
}

apply from: "$rootDir/gradle/versioning.gradle"

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    implementation 'commons-io:commons-io:2.6'
    implementation 'net.sf.saxon:Saxon-HE:9.9.0-2'
    implementation 'org.apache.xmlgraphics:fop:2.3'
    implementation 'net.sf.offo:fop-hyph:2.0' 
    implementation 'org.apache.httpcomponents:httpclient:4.5.6'
    implementation 'org.locationtech.jts:jts-core:1.16.0'
   
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit-pioneer:junit-pioneer:0.3.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'io.github.sogis'

repositories {
    mavenCentral()
}

distZip {
    archiveName 'pdf4oereb' + '-'  + project.version.toString() + '.zip'
}

distTar {
    archiveName 'pdf4oereb' + '-'  + project.version.toString() + '.tar'
}

application {
    mainClassName = "ch.so.agi.oereb.pdf4oereb.Main"
}

run {
    //args = ["--html", "-i", "src/test/data/bl/CH567107399166_geometry_images.xml", "-o", "/Users/stefan/tmp/"]
    //args = ["--fo", "-i", "src/test/data/bl/CH567107399166_geometry_images.xml", "-o", "/Users/stefan/tmp/"]
    //args = ["-i", "src/test/data/bl/CH567107399166_geometry_images.xml", "-o", "/Users/stefan/tmp/"]
    //args = ["--xml", "src/test/data/bl/CH567107399166_geometry_images.xml", "--out", "/Users/stefan/tmp/", "--lang", "fr"]
    //args = ["--html", "-i", "src/test/data/zh/CH282399917939_geometry_wms.xml", "-o", "/Users/stefan/tmp/"]
    //args = ["--fo", "-i", "src/test/data/zh/CH282399917939_geometry_wms.xml", "-o", "/Users/stefan/tmp/"]
    //args = ["-i", "src/test/data/zh/CH282399917939_geometry_wms.xml", "-o", "/Users/stefan/tmp/"]
    //args = ["--fo", "-i", "src/test/data/vs/VS6136_3544_geometry_embedded.xml", "-o", "/Users/stefan/tmp/"]
    //args = ["-i", "src/test/data/nw/CH907705273474.xml", "-o", "/Users/stefan/tmp/"]
    //args = ["--xml", "src/test/data/so/CH710605328767_geometry_images.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]
    //args = ["--xml", "src/test/data/so/CH368132060914_geometry_images.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]
    //args = ["--xml", "src/test/data/gl/CH767922690036_RealEstate.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]
    //args = ["--xml", "src/test/data/so/CH608606483257.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]
    //args = ["--xml", "src/test/data/so/CH857632820629_layer_ordering.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]    
    //args = ["--xml", "src/test/data/so/CH368132060914_sorting_again.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]  
    //args = ["--xml", "src/test/data/so/CH857632820629.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]          
    //args = ["--xml", "src/test/data/so/CH793273730603_hint.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]          
    //args = ["--xml", "src/test/data/so/CH233274062061_M-16.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]          
    //args = ["--xml", "src/test/data/so/CH233274062061_M-16-fixed-wms-url.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]          
    args = ["--xml", "src/test/data/so/CH993287900649-other-legend.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]          
    //args = ["--xml", "src/test/data/so/CH233274062061-other-legend.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]          
    //args = ["--xml", "src/test/data/so/CH870672603279.xml", "--out", "/Users/stefan/tmp/", "--lang", "de"]          
}


archivesBaseName = rootProject.name

task customFatJar(type: Jar) {
    description = "Creates an executable fat jar."
    manifest {
        attributes "Implementation-Vendor": "Sun Microsystems, Inc"
        attributes "Implementation-Title": "Java Runtime Environment"
        attributes "Implementation-Version": "1.8.0"
        attributes "Main-Class": "ch.so.agi.oereb.pdf4oereb.Main"        
    }
    baseName = rootProject.name + "-fat"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
    with jar
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    useJUnitPlatform {
        excludeTags 'wms'    
    }
}

task wmsTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run tests with external wms dependencies.'
    
    useJUnitPlatform {
        includeTags 'wms'
    }
    check.dependsOn it
    shouldRunAfter test
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


// Disable very strict javadoc generation, e.g. handling of ">" in comments.
// https://stackoverflow.com/questions/34874175/disable-all-javadoc-in-gradle
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "pdf4oereb"
                url = "https://github.com/sogis/pdf4oereb"
                description = "pdf4oereb"
                scm {
                    connection = "scm:git:https@github.com/sogis/pdf4oereb"
                    developerConnection = "scm:git:https@github.com/sogis/pdf4oereb"
                    url = "https://github.com/sogis/pdf4oereb"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://github.com/sogis/pdf4oereb/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "edigonzales"
                        name = "Stefan Ziegler"
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype { 
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
            password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        }
    }
}