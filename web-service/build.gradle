buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }		
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.bmuschko:gradle-docker-plugin:4.2.0"
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

bootJar {
    launchScript()
    archiveName = rootProject.name + "-web-service-" +scmVersion.version + ".jar"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation (project (':library')) { exclude group: "org.slf4j" } 
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    runtime("org.springframework.boot:spring-boot-actuator:${springBootVersion}")
    implementation 'net.sf.saxon:Saxon-HE:9.9.0-2' // TODO: Get rid of it. Create custom exception.
    implementation("org.webjars:materializecss:0.100.2")
    implementation("org.webjars:jquery:2.2.4")
    implementation("commons-io:commons-io:2.6")
    implementation("io.rest-assured:rest-assured:3.2.0")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        //exclude(module: 'commons-logging')
    }		
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit-pioneer:junit-pioneer:0.3.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    
}

test {
    testLogging {
        showStandardStreams = true
    }
    useJUnitPlatform()
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.projectDir
    tags = ["sogis/pdf4oereb-web-service:"+ scmVersion.version, "sogis/pdf4oereb-web-service:latest"]
}


task pushDockerImage_One(dependsOn: 'buildDockerImage', type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (images are UNTESTED)."
    imageName = buildDockerImage.tags.get().toArray()[0]
}

task pushDockerImage_Two(dependsOn: 'buildDockerImage', type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (images are UNTESTED)."
    imageName = buildDockerImage.tags.get().toArray()[1]
}

task pushDockerImages() {
    description = "Collect all push images tasks."
}

pushDockerImages.dependsOn {
    tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
}

task fubar() {
    doLast {
        println "*****"
        println System.env.dockerRegistryadf
        println project.version.toString()
        
    }
}
