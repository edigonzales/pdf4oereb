buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }		
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.bmuschko:gradle-docker-plugin:6.4.0"
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

bootJar {
    launchScript()
    archiveName = rootProject.name + "-web-service-" + project.version.toString() + ".jar"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation (project (':library')) { exclude group: "org.slf4j" } 
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    runtime("org.springframework.boot:spring-boot-actuator:${springBootVersion}")
    implementation("org.webjars:materializecss:0.100.2")
    implementation("org.webjars:jquery:2.2.4")
    implementation("commons-io:commons-io:2.6")
    implementation("io.rest-assured:rest-assured:3.2.0")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        //exclude(module: 'commons-logging')
    }		
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit-pioneer:junit-pioneer:0.3.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    
}

test {
    testLogging {
        showStandardStreams = true
    }
    useJUnitPlatform()
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.projectDir
    images.add("sogis/pdf4oereb-web-service:"+version.toString())
    images.add("sogis/pdf4oereb-web-service:latest")
    labels = ["pdf4oereb.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "pdf4oereb.git_commit": getCheckedOutGitCommitHash(), 
            "pdf4oereb.travis_build": project.version.toString()]    
}

def tags = ["latest", version]

tags.each { tag ->
    def imageTag = tag.toString()
    task "pushDockerImage_$imageTag"(type: DockerPushImage) {
        description = "Push docker image to hub.docker.com: $imageTag"
        images = ["sogis/pdf4oereb-web-service:$imageTag"]
    }
}

task pushDockerImages() {
    description = "Push docker images to hub.docker.com."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
    }    
}

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

